import java.io.*;
import java.lang.String;
import java.lang.Character;
import java.util.Formatter;
import javax.swing.JOptionPane;
import java.util.Random;
import java.lang.Integer;
import java.text.DecimalFormat;


//package troll;
//**juiced Soundex
//English text to IPA character data producer
//by: john summers, MS

public class Test extends brick {
  public static void main (String[] argv) throws UnsupportedEncodingException {
    Object[] options = {"Test me again?", "Done testing for now"};
    crank();
    int count = 0, macy = 1, ggtracy = 0, n = 0, sound_index = 0, taste = 0, pop = 0, mop = 0, tat = 0, maj = 0, haj = 0, mee = 0, tee = 0, see = 0;
    int replyTHRESHOLD = 0, tugger = 0;
    String unicodeMessage = "", jumper = "", thumper = "", trumper = "", toot = "", moot = "";
    PrintStream out = new PrintStream(System.out, true, "UTF-8");
    phones coolio = new phones();
    Integer code = 0, beak = 0, sneak = 0, creak = 0, cooner = 0, booner = 0, sooner = 0, telly = 0, jelly = 0, belly = 0;
    char ch = 'a';
    Random jenny = new Random();
    ibby_brick(95);
    set_sound();
    quick();
    String ANSI_CLEAR_SEQ = "\u001b[2J";  
    //System.out.println(ANSI_CLEAR_SEQ);
    String holdInputHere = "";
    DecimalFormat df = new DecimalFormat("+00000;-00000");
    //***********************************************************************************************************
    //this while loop encompasses all of Test.java; n becomes 0 when user is done testing (see dialog box at end)
    //***********************************************************************************************************

    while (n == 0) {
	replyTHRESHOLD = 0;
	sound_index = 0;
	count = 0;
	macy = 1;
	ggtracy = 0; 
	jumper = "";
	moot = "";
	toot = "";
	
	holdInputHere = JOptionPane.showInputDialog(null, "Pretend something relevant appears in place of this text and begin.");
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//presumably people like to be spoken to
	//only as much as they like to speak
	//replyTHRESHOLD limits myStringInts in
	//coolio, the instance of phones
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	//***********************************
	//may need to revisit this as text is
	//usually longer than quasi-legal
	//sequences of phonetic symbols
	//***********************************

	//####################################################
	//ensures there is always input relevant to the domain
	//####################################################

	if(holdInputHere.length() == 0) {holdInputHere = "I cannot think of anything relevant to say right now.";}
	
	replyTHRESHOLD = holdInputHere.length();

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//this for loop iterates through the basic IPA using hexadecimal values; does not include all 166 symbols comprising the complete IPA
	//it also produces an utterance: a random sequence of basic English phonemic units
	//it populates a character array called fooburger in brick.java with these fundamental IPA characters
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	for (int foo = 0x0250; foo <= 0x02AE; foo++) {
	    unicodeMessage = String.format("\\u%04x", foo);
	    code = Integer.parseInt(unicodeMessage.substring(2), 16);
	    ch = Character.toChars(code)[0];
	    //out.println("character: " + ch + " " + "unicodeMessage: " + unicodeMessage + " " + "code: " + code);
	    put_fooburger(count, ch);
	    macy++;
	    sound_index = get_sounds();
	    jumper = jumper + String.valueOf(sound_index) + " ";
	    count++;
	}
	
	//this prints the random sequence generated in the for loop above
	//out.println(jumper);
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	//toot contains a random sequence of basic English phonemic units
	//conditioned by the Soundex code generated by user input
	//this code processes the utterance issued by the user
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	toot = baka_gen(holdInputHere);
	//################################################
	//this stores toot in brick.java's commente String
	//################################################
	set_comente(toot);
	//###################################################
	//the following function is only supported in Mac OSX
	//###################################################
	say_phon();
	out.println("***>> " + toot + " <<***");
	//####################################
	//coolio is the key instance of phones
	//####################################
	coolio.crank();
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	//crank is integral as it adds data for 166
	//IPA symbols in 7 Hashtable[s] as seen in
	//the 7 columns of my IPA.pdf
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	beak = 0;
	creak = 0;
	sneak = 0;
	//##################################################################################
	//this generates myStringInts in coolio, the instance of the essential phones class
	//myStringInts is the base response derived from a random selection of the available 
	//phonetic symbols. replyTHRESHOLD is set as the length of holdInputHere, natural
	//language input from the user obtained at the outset of the outermost while loop
	//##################################################################################
	for(int fii = 0; fii < replyTHRESHOLD; fii++) {
            beak = 0;
	    beak = jenny.nextInt(5);
	    creak = coolio.spin(fii);
	    if(creak != null) {
		//ch = Character.toChars(creak)[0];
		//out.print(ch);
	    }
	    //if (beak < 3) {out.print(" ");}
        }
	//beak = 0;
	//creak = 0;
	//tat = 0;
	//maj = 0;
	//mee = 0;
	//tee = 0;
	//tugger = 0;
	
	coolio.parsemSIforModifiers();
	//coolio.function_phi(660, 8599);
	//Integer voy = 829;
	//Integer jojo = coolio.getPhoneNumber(voy);
	//System.out.println("jojo is " + jojo);
	//for(int i = 0; i < coolio.getmSIlen(); i++) {
	//    System.out.println("mSI at " + i + " is " + coolio.getmSI(i) + " and phone number is " + coolio.getPhoneNumber(coolio.getmSI(i)));
	//}
	//######################################
	//This generates the output required for
	//use along with the MORPHMAP generator
	//######################################
	
	out.println("");
	out.println("*******************PHONMAP*****************");
	out.println("  Integer         Index         Character");
	for(int ooh = 0; ooh < coolio.getmSIlen(); ooh++) {
	    jumper = Integer.toString(coolio.getmSI(ooh));
	    pop = coolio.getmSI(ooh);
	    //out.println("Getting the Integer of the response phoneme: " + jumper);
	    trumper = Integer.toString(coolio.getPhoneNumber(coolio.getmSI(ooh)));
	    mop = coolio.getPhoneNumber(coolio.getmSI(ooh));
	    taste = coolio.getPhoneNumber(coolio.getmSI(ooh));
	    //out.println("Getting the index number of the phoneme (1-166): " + trumper);
	    thumper = coolio.getPhoneSymbol(taste);
	    thumper = thumper.replace("\\u", "");
	    //out.println("This is the respective phonetic symbol: " + (char)Integer.parseInt(thumper, 16));
	    //System.out.println("---->" + df.format(tiger) + "---->" + df.format(coo) + "---->" + df.format(doo));
	    out.println("  " + df.format(pop) + "         " + df.format(mop) + "              " + (char)Integer.parseInt(thumper, 16));
	    }
	out.println("");
	out.println("");
        out.println("*************modified PHONMAP************");
        out.println("  Integer         Index         Character");
	for(int ooh = 0; ooh < coolio.getmSIModlen(); ooh++) {
            jumper = Integer.toString(coolio.get_from_myStringIntsMod(ooh));
            pop = coolio.get_from_myStringIntsMod(ooh);
            trumper = Integer.toString(coolio.getPhoneNumber(coolio.get_from_myStringIntsMod(ooh)));
            mop = coolio.getPhoneNumber(coolio.get_from_myStringIntsMod(ooh));
            taste = coolio.getPhoneNumber(coolio.get_from_myStringIntsMod(ooh));
            thumper = coolio.getPhoneSymbol(taste);
            thumper = thumper.replace("\\u", "");
            out.println("  " + df.format(pop) + "         " + df.format(mop) + "              " + (char)Integer.parseInt(thumper, 16));
        }
        out.println("");
	n = JOptionPane.showOptionDialog(null,"Test again?", "A good question",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[1]);
    }
  }
}